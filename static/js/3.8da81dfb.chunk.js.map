{"version":3,"sources":["components/nurse/Nurse.tsx"],"names":["moveJoint","mouse","joint","degreeLimit","rotation","degrees","getMouseDegrees","current","x","y","xD","THREE","lerp","yD","degToRad","Model","props","group","useRef","useLoader","GLTFLoader","nodes","animations","texture","texture2","actions","useState","animationType","mixer","useFrame","state","delta","update","useEffect","idle","clipAction","play","forEach","clip","uncacheClip","mixamorigHead","mixamorigSpine","ref","dispose","Math","PI","object","receiveShadow","castShadow","geometry","skeleton","map","map-flipY","skinning"],"mappings":"mOAQA,SAASA,EAAUC,EAAYC,GAAuC,IAA3BC,EAA0B,uDAAJ,GAC/D,GAAKD,EAAME,SAAX,CACA,IAAIC,EAAUC,YAAgBL,EAAMM,QAAQC,EAAGP,EAAMM,QAAQE,EAAGN,GAChED,EAAME,SAASM,GAAKC,YAAgBC,KAClCV,EAAME,SAASM,IAAM,EACrBL,EAAQI,EACR,IAEFP,EAAME,SAASS,GAAKF,YAAgBC,KAClCV,EAAME,SAASS,IAAM,EACrBR,EAAQG,EACR,IAEFN,EAAME,SAASI,EAAIG,YAAgBG,SAASZ,EAAME,SAASM,IAC3DR,EAAME,SAASK,EAAIE,YAAgBG,SAASZ,EAAME,SAASS,KAG9C,SAASE,EAAT,GAA8B,IAAVC,EAAS,oBACpCC,EAAQC,mBAD4B,EAEZC,YAAUC,IAAY,eAA5CC,EAFkC,EAElCA,MAAOC,EAF2B,EAE3BA,WACTC,EAAUJ,YAAUR,gBAAqB,eACzCa,EAAWL,YAAUR,gBAAqB,gBAE1Cc,EAAUP,mBAN0B,EAO1BQ,oBAAS,kBAAM,IAAIf,iBAAqBU,EAAML,EAAMW,mBAA7DC,EAPmC,oBAuB1C,OAfAC,aAAS,SAACC,EAAOC,GAAR,OAAkBH,EAAMI,OAAOD,MAExCE,qBAAU,WAGR,OAFCR,EAAQlB,QAAkB,CAAE2B,KAAMN,EAAMO,WAAWb,EAAWN,EAAMW,eAAgBV,EAAMV,UAC1FkB,EAAQlB,QAAgB2B,KAAKE,OACvB,kBAAMd,EAAWe,SAAQ,SAACC,GAAD,OAAUV,EAAMW,YAAYD,SAC3D,CAACtB,EAAMW,cAAeC,EAAON,IAEhCO,aAAS,SAACC,EAAOC,GAEfH,EAAMI,OAAOD,GACb/B,EAAUgB,EAAMf,MAAOoB,EAAMmB,eAC7BxC,EAAUgB,EAAMf,MAAOoB,EAAMoB,mBAI7B,+CAAOC,IAAKzB,GAAWD,GAAvB,IAA8B2B,QAAS,KAAvC,SACE,wBAAOvC,SAAU,CAACwC,KAAKC,GAAK,EAAG,EAAG,GAAlC,UACE,2BAAWC,OAAQzB,EAAK,gBACxB,8BACE0B,eAAa,EACbC,YAAU,EACVC,SAAW5B,EAAK,OAAmB4B,SACnCC,SAAW7B,EAAK,OAAmB6B,SAJrC,UAME,6BACEH,eAAa,EACbC,YAAU,EACVC,SAAW5B,EAAK,KAAiB4B,SACjCC,SAAW7B,EAAK,KAAiB6B,SAJnC,SAKC,sCAAsBC,IAAK3B,EAAU4B,aAAW,EAAOC,UAAQ,MAChE,sCAAsBF,IAAK5B,EAAS6B,aAAW,EAAOC,UAAQ","file":"static/js/3.8da81dfb.chunk.js","sourcesContent":["// Auto-generated by https://github.com/react-spring/gltfjsx\n\nimport * as THREE from \"three\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { useLoader, useFrame } from \"react-three-fiber\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { getMouseDegrees } from \"../../utils\";\n\nfunction moveJoint(mouse: any, joint: any, degreeLimit: number = 40) {\n  if (!joint.rotation) return;\n  let degrees = getMouseDegrees(mouse.current.x, mouse.current.y, degreeLimit);\n  joint.rotation.xD = THREE.MathUtils.lerp(\n    joint.rotation.xD || 0,\n    degrees.y,\n    0.1\n  );\n  joint.rotation.yD = THREE.MathUtils.lerp(\n    joint.rotation.yD || 0,\n    degrees.x,\n    0.1\n  );\n  joint.rotation.x = THREE.MathUtils.degToRad(joint.rotation.xD);\n  joint.rotation.y = THREE.MathUtils.degToRad(joint.rotation.yD);\n}\n\nexport default function Model({ ...props }) {\n  const group = useRef();\n  const { nodes, animations } = useLoader(GLTFLoader, \"./nurse.glb\");\n  const texture = useLoader(THREE.TextureLoader, \"./nurse.jpg\");\n  const texture2 = useLoader(THREE.TextureLoader, \"./nurse2.jpg\");\n\n  const actions = useRef();\n  const [mixer] = useState(() => new THREE.AnimationMixer(nodes[props.animationType]));\n  useFrame((state, delta) => mixer.update(delta));\n\n  useEffect(() => {\n    (actions.current as any) = { idle: mixer.clipAction(animations[props.animationType], group.current) };\n    (actions.current as any).idle.play();\n    return () => animations.forEach((clip) => mixer.uncacheClip(clip));\n  }, [props.animationType, mixer, animations]);\n\n  useFrame((state, delta) => {\n    debugger;\n    mixer.update(delta);\n    moveJoint(props.mouse, nodes.mixamorigHead);\n    moveJoint(props.mouse, nodes.mixamorigSpine);\n  });\n\n  return (\n    <group ref={group} {...props} dispose={null}>\n      <group rotation={[Math.PI / 2, 0, 0]}>\n        <primitive object={nodes[\"mixamorigHips\"]} />\n        <skinnedMesh\n          receiveShadow\n          castShadow\n          geometry={(nodes[\"Mesh_1\"] as any).geometry}\n          skeleton={(nodes[\"Mesh_1\"] as any).skeleton}\n        >\n          <skinnedMesh\n            receiveShadow\n            castShadow\n            geometry={(nodes[\"Mesh\"] as any).geometry}\n            skeleton={(nodes[\"Mesh\"] as any).skeleton}\n          ><meshStandardMaterial map={texture2} map-flipY={false} skinning /></skinnedMesh>\n          <meshStandardMaterial map={texture} map-flipY={false} skinning />\n        </skinnedMesh>\n      </group>\n    </group>\n  );\n}\n"],"sourceRoot":""}